#!/usr/bin/python3

# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from pwnlib.util.fiddling import xor

sbox = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
]

isbox = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
]

rcon = [
    [0x01, 0x00, 0x00, 0x00],
    [0x02, 0x00, 0x00, 0x00],
    [0x04, 0x00, 0x00, 0x00],
    [0x08, 0x00, 0x00, 0x00],
    [0x10, 0x00, 0x00, 0x00],
    [0x20, 0x00, 0x00, 0x00],
    [0x40, 0x00, 0x00, 0x00],
    [0x80, 0x00, 0x00, 0x00],
    [0x1b, 0x00, 0x00, 0x00],
    [0x36, 0x00, 0x00, 0x00],
]

def xtime(a):
    if a & 0x80: return (a<<1) ^ 0x11b
    return a<<1

class AES:
    def __init__(self, key: bytes):
        self.n_rounds = 10
        self.round_keys = self.expand_key(key)

    def expand_key(self, key: bytes) -> list:
        round_keys = [list(key)]
        for r in range(self.n_rounds):
            round_key = [
                round_keys[-1][i] ^ sbox[round_keys[-1][j]] ^ rcon[r][i]
                for i, j in enumerate([13, 14, 15, 12])
            ]
            for i in range(4, 16): round_key.append(round_keys[-1][i] ^ round_key[-4])
            round_keys.append(round_key)
        return round_keys

    def sub_bytes(self, m: bytearray) -> bytearray:
        return bytearray(sbox[mc] for mc in m)

    def inv_sub_bytes(self, c: bytearray) -> bytearray:
        return bytearray(isbox[cc] for cc in c)

    def shift_rows(self, m: bytearray) -> bytearray:
        m[+0], m[+4], m[+8], m[12] = m[+0], m[+4], m[-8], m[12]
        m[+1], m[+5], m[+9], m[13] = m[+5], m[+9], m[13], m[+1]
        m[+2], m[+6], m[10], m[14] = m[10], m[14], m[+2], m[+6]
        m[+3], m[+7], m[11], m[15] = m[15], m[+3], m[+7], m[11]
        return m

    def inv_shift_rows(self, c: bytearray) -> bytearray:
        c[+0], c[+4], c[+8], c[12] = c[+0], c[+4], c[+8], c[12]
        c[+5], c[+9], c[13], c[+1] = c[+1], c[+5], c[+9], c[13]
        c[10], c[14], c[+2], c[+6] = c[+2], c[+6], c[10], c[14]
        c[15], c[+3], c[+7], c[11] = c[+3], c[+7], c[11], c[15]
        return c

    def mix_columns(self, m: bytearray) -> bytearray:
        for i in range(0, 16, 4):
            t = m[i+0] ^ m[i+1] ^ m[i+2] ^ m[i+3]
            u = m[i+0]
            m[i+0] ^= t ^ xtime(m[i+0] ^ m[i+1])
            m[i+1] ^= t ^ xtime(m[i+1] ^ m[i+2])
            m[i+2] ^= t ^ xtime(m[i+2] ^ m[i+3])
            m[i+3] ^= t ^ xtime(m[i+3] ^ u)
        return m

    def inv_mix_columns(self, c: bytearray) -> bytearray:
        for i in range(0, 16, 4):
            u = xtime(xtime(c[i+0] ^ c[i+2]))
            v = xtime(xtime(c[i+1] ^ c[i+3]))
            c[i+0] ^= u
            c[i+1] ^= v
            c[i+2] ^= u
            c[i+3] ^= v
        return self.mix_columns(c)

    def add_round_key(self, m: bytearray, r: int) -> bytearray:
        return bytearray(xor(m, self.round_keys[r]))

    def encrypt(self, m: bytes) -> bytes:
        c = bytearray(m)
        c = self.add_round_key(c, 0)
        for r in range(1, self.n_rounds):
            c = self.sub_bytes(c)
            c = self.shift_rows(c)
            c = self.mix_columns(c)
            c = self.add_round_key(c, r)
        c = self.sub_bytes(c)
        c = self.shift_rows(c)
        c = self.add_round_key(c, self.n_rounds)
        return bytes(c)

    def decrypt(self, c: bytes) -> bytes:
        m = bytearray(c)
        m = self.add_round_key(m, self.n_rounds)
        for r in range(self.n_rounds-1, 0, -1):
            m = self.inv_shift_rows(m)
            m = self.inv_sub_bytes(m)
            m = self.add_round_key(m, r)
            m = self.inv_mix_columns(m)
        m = self.inv_shift_rows(m)
        m = self.inv_sub_bytes(m)
        m = self.add_round_key(m, 0)
        return bytes(m)

if __name__ == '__main__':
    import os
    from rich.progress import track
    from Crypto.Cipher import AES as _AES

    # We can retrieve the original message after encryption, followed by
    # decryption. What can go wrong? :)
    for _ in track(range(1024)):
        k = os.urandom(16)

        aes = AES(k)
        m1 = os.urandom(16)
        c = aes.encrypt(m1)
        m2 = aes.decrypt(c)
        assert m1 == m2

    # Well tested with pycrypto/pycryptodome package. What can go wrong? :)
    for _ in track(range(1024)):
        k = os.urandom(16)
        m = os.urandom(16)

        aes = _AES.new(k, _AES.MODE_ECB)
        c1 = aes.encrypt(m)
        aes = AES(k)
        c2 = aes.encrypt(m)
        assert c1 == c2
