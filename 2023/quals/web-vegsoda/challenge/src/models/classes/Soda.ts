/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


// @ts-ignore  
import { toDeserialize, toSerialize, } from "https://deno.land/x/superserial/mod.ts";
// @ts-ignore  
import { escape } from "https://deno.land/std@0.192.0/html/mod.ts";
import Message from "../interfaces/Message.ts";
import User from "./User.ts";

enum SodaVariety {
    Carrot = "Carrot",
    Eggplant = "Eggplant",
    Celery = "Celery",
    Tomato = "Tomato",
    Cucumber = "Cucumber",
    Broccoli = "Broccoli",
    Bell_Pepper = "Bell Pepper"
}

export default class Soda implements Message{
    id: string;
    dest: string;
    src: string;
    variety: SodaVariety;
    note: string;

    constructor ( 
        v: SodaVariety,
        src: string,
        note: string,
        id?: string,
        dest?: string,
     ) {
        if (id){
            this.id = id;
        } else {
            this.id = crypto.randomUUID();
        }

        if (dest){
            this.dest = dest;
        } else {
            this.dest = "unassigned";
        }     
        this.variety = v;
        this.src = src;
        this.note = note;
    }

    static getSoda(variety: string, src: string, note: string, id?: string, dest?: string): Soda{
        
        switch(variety){
            case "Carrot":
                var vegsoda = new Soda(SodaVariety.Carrot, src, note, id, dest);
                break;
            case "Eggplant":
                var vegsoda = new Soda(SodaVariety.Eggplant, src, note, id, dest);
                break;
            case "Celery":
                var vegsoda = new Soda(SodaVariety.Celery, src, note, id, dest);
                break;
            case "Tomato":
                var vegsoda = new Soda(SodaVariety.Tomato, src, note, id, dest);
                break;
            case "Cucumber":
                var vegsoda = new Soda(SodaVariety.Cucumber, src, note, id, dest);
                break;
            case "Broccoli":
                var vegsoda = new Soda(SodaVariety.Broccoli, src, note, id, dest);
                break;
            case "Bell Pepper":
                var vegsoda = new Soda(SodaVariety.Bell_Pepper, src, note, id, dest);
                break;
            default:
                var vegsoda = new Soda(SodaVariety.Carrot, src, note, id, dest);
                break;
        }
        return vegsoda;
    }

    apply(){
        this.note = escape(this.note);
    }

    resolve(user: User){
        this.dest = user.getUsername();
        user.pushToSodas(this);
    }

    validate(user: User): boolean{
        if (this.dest === user.getUsername()){
            return true;
        } else return false;
    }

    dispatch(): string {
        return `SODA GENERATED BY ${this.src}: 
                    -- FLAVOR: ${this.variety}
                    -- TO: ${this.dest}`;
    }

    [toSerialize]() {
        return {
            id: this.id,
            dest: this.dest,
            src: this.src,
            variety: this.variety,
            note: this.note
        };
    }

    [toDeserialize](
        value: {
            id: string,
            dest: string;
            src: string;
            variety: SodaVariety;
            note: string;
        },
      ) {
        this.id = value.id;
        this.dest = value.dest;
        this.src = value.src;
        this.variety = value.variety;
        this.note = value.note;
    }
    
}