Copyright 2023 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
diff '--color=auto' -Nruiwd -x '*~' bkcrack-1.5.0.orig/src/Attack.cpp bkcrack-1.5.0/src/Attack.cpp
--- bkcrack-1.5.0.orig/src/Attack.cpp	2022-07-07 17:52:10.000000000 +0000
+++ bkcrack-1.5.0/src/Attack.cpp	2023-06-23 09:41:03.483455227 +0000
@@ -3,6 +3,10 @@
 #include "Crc32Tab.hpp"
 #include "KeystreamTab.hpp"
 #include "MultTab.hpp"
+#include <cstring>
+
+extern char second_ciphertext[16];
+extern char second_plaintext[5];
 
 Attack::Attack(const Data& data, std::size_t index, std::vector<Keys>& solutions, bool exhaustive, Progress& progress)
  : data(data), index(index + 1 - Attack::CONTIGUOUS_SIZE), solutions(solutions), exhaustive(exhaustive), progress(progress)
@@ -160,6 +164,18 @@
     // get the keys associated with the initial state
     keysBackward.updateBackward(data.ciphertext, indexBackward, 0);
 
+    // the keys seem correct based on eight contiguous bytes, now check the second file
+    Keys keysTest(keysBackward);
+    char poss_plaintext[16];
+    for (int i = 0; i < 16; ++i)
+    {
+       char p = second_ciphertext[i] ^ keysTest.getK();
+       poss_plaintext[i] = p;
+       keysTest.update(p);
+    }
+    if (memcmp(poss_plaintext + 11, second_plaintext, 5) != 0)
+       return;
+    
     #pragma omp critical
     solutions.push_back(keysBackward);
 
diff '--color=auto' -Nruiwd -x '*~' bkcrack-1.5.0.orig/src/Data.cpp bkcrack-1.5.0/src/Data.cpp
--- bkcrack-1.5.0.orig/src/Data.cpp	2022-07-07 17:52:10.000000000 +0000
+++ bkcrack-1.5.0/src/Data.cpp	2023-06-23 09:43:56.099300093 +0000
@@ -141,8 +141,10 @@
     // check that there is enough known plaintext
     if(plaintext.size() < Attack::CONTIGUOUS_SIZE)
         throw Error("not enough contiguous plaintext ("+std::to_string(plaintext.size())+" bytes available, minimum is "+std::to_string(Attack::CONTIGUOUS_SIZE)+")");
+#if 0
     if(plaintext.size() + extraPlaintext.size() < Attack::ATTACK_SIZE)
         throw Error("not enough plaintext ("+std::to_string(plaintext.size() + extraPlaintext.size())+" bytes available, minimum is "+std::to_string(Attack::ATTACK_SIZE)+")");
+#endif
 
     // reorder remaining extra plaintext for filtering
     {
diff '--color=auto' -Nruiwd -x '*~' bkcrack-1.5.0.orig/src/main.cpp bkcrack-1.5.0/src/main.cpp
--- bkcrack-1.5.0.orig/src/main.cpp	2022-07-07 17:52:10.000000000 +0000
+++ bkcrack-1.5.0/src/main.cpp	2023-06-23 09:37:29.067641892 +0000
@@ -13,6 +13,12 @@
 #include <iomanip>
 #include <limits>
 
+#include <cstdio>
+#define SECOND_CIPHERTEXT_FILENAME "second_ciphertext"
+#define SECOND_PLAINTEXT_FILENAME "second_plaintext"
+char second_ciphertext[16];
+char second_plaintext[5];
+
 namespace
 {
 
@@ -87,6 +93,49 @@
 int main(int argc, char const *argv[])
 try
 {
+   // read in second ciphertext and second plaintext
+   {
+      FILE *fp;
+      fp = fopen(SECOND_CIPHERTEXT_FILENAME, "rb");
+      if (!fp)
+      {
+	 perror(SECOND_CIPHERTEXT_FILENAME);
+	 return -1;
+      }
+      fseek(fp, 0L, SEEK_END);
+      if (ftell(fp) != 16)
+      {
+	 fprintf(stderr, "second ciphertext has wrong length\n");
+	 return -1;
+      }
+      fseek(fp, 0L, SEEK_SET);
+      if (fread(second_ciphertext, 1, 16, fp) != 16)
+      {
+	 fprintf(stderr, "error reading second ciphertext\n");
+	 return -1;
+      }
+      fclose(fp);
+      fp = fopen(SECOND_PLAINTEXT_FILENAME, "rb");
+      if (!fp)
+      {
+	 perror(SECOND_PLAINTEXT_FILENAME);
+	 return -1;
+      }
+      fseek(fp, 0L, SEEK_END);
+      if (ftell(fp) != 5)
+      {
+	 fprintf(stderr, "second plaintext has wrong length\n");
+	 return -1;
+      }
+      fseek(fp, 0L, SEEK_SET);
+      if (fread(second_plaintext, 1, 5, fp) != 5)
+      {
+	 fprintf(stderr, "error reading second plaintext\n");
+	 return -1;
+      }
+      fclose(fp);
+   }
+
     // enable virtual terminal support on Windows, no-op on other platforms
     VirtualTerminalSupport vtSupport;
 
