// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: proto/flag.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlagServiceClient is the client API for FlagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlagServiceClient interface {
	CheckFlag(ctx context.Context, in *CheckFlagRequest, opts ...grpc.CallOption) (*CheckFlagResponse, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type flagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlagServiceClient(cc grpc.ClientConnInterface) FlagServiceClient {
	return &flagServiceClient{cc}
}

func (c *flagServiceClient) CheckFlag(ctx context.Context, in *CheckFlagRequest, opts ...grpc.CallOption) (*CheckFlagResponse, error) {
	out := new(CheckFlagResponse)
	err := c.cc.Invoke(ctx, "/bpftracer.proto.FlagService/CheckFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flagServiceClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/bpftracer.proto.FlagService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlagServiceServer is the server API for FlagService service.
// All implementations must embed UnimplementedFlagServiceServer
// for forward compatibility
type FlagServiceServer interface {
	CheckFlag(context.Context, *CheckFlagRequest) (*CheckFlagResponse, error)
	Ping(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedFlagServiceServer()
}

// UnimplementedFlagServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlagServiceServer struct {
}

func (UnimplementedFlagServiceServer) CheckFlag(context.Context, *CheckFlagRequest) (*CheckFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFlag not implemented")
}
func (UnimplementedFlagServiceServer) Ping(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFlagServiceServer) mustEmbedUnimplementedFlagServiceServer() {}

// UnsafeFlagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlagServiceServer will
// result in compilation errors.
type UnsafeFlagServiceServer interface {
	mustEmbedUnimplementedFlagServiceServer()
}

func RegisterFlagServiceServer(s grpc.ServiceRegistrar, srv FlagServiceServer) {
	s.RegisterService(&FlagService_ServiceDesc, srv)
}

func _FlagService_CheckFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlagServiceServer).CheckFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bpftracer.proto.FlagService/CheckFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlagServiceServer).CheckFlag(ctx, req.(*CheckFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlagService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlagServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bpftracer.proto.FlagService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlagServiceServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// FlagService_ServiceDesc is the grpc.ServiceDesc for FlagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bpftracer.proto.FlagService",
	HandlerType: (*FlagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckFlag",
			Handler:    _FlagService_CheckFlag_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _FlagService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/flag.proto",
}
